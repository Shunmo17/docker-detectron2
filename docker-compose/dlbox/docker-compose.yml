version: "2.3"
services:
    # detectron2_env_cam06:
    #     stdin_open: "true"
    #     network_mode: host
    #     runtime: nvidia
    #     environment:
    #         NVIDIA_VISIBLE_DEVICES: 0
    #         NVIDIA_DRIVER_CAPABILITIES: all
    #         DISPLAY: ${DISPLAY}
    #         CAM_NUMBER: "06"
    #         TEST_ENABLE: "false"
    #         ROS_MASTER_MODE: ${ROS_MASTER_MODE}
    #     volumes:
    #         - /tmp/.X11-unix:/tmp/.X11-unix
    #         - /etc/localtime:/etc/localtime:ro
    #         - ${HOME}/.Xauthority:/root/.Xauthority
    #         - ${PWD}/common_files/alias.sh:/alias.sh
    #         - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
    #         - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
    #         - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
    #         - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
    #     image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
    #     command: /startup_for_docker.sh

    # detectron2_env_cam07:
    #     stdin_open: "true"
    #     network_mode: host
    #     runtime: nvidia
    #     environment:
    #         NVIDIA_VISIBLE_DEVICES: 0
    #         NVIDIA_DRIVER_CAPABILITIES: all
    #         DISPLAY: ${DISPLAY}
    #         CAM_NUMBER: "07"
    #         TEST_ENABLE: "false"
    #         ROS_MASTER_MODE: ${ROS_MASTER_MODE}
    #     volumes:
    #         - /tmp/.X11-unix:/tmp/.X11-unix
    #         - /etc/localtime:/etc/localtime:ro
    #         - ${HOME}/.Xauthority:/root/.Xauthority
    #         - ${PWD}/common_files/alias.sh:/alias.sh
    #         - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
    #         - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
    #         - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
    #         - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
    #     image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
    #     command: /startup_for_docker.sh

    # detectron2_env_cam08:
    #     stdin_open: "true"
    #     network_mode: host
    #     runtime: nvidia
    #     environment:
    #         NVIDIA_VISIBLE_DEVICES: 1
    #         NVIDIA_DRIVER_CAPABILITIES: all
    #         DISPLAY: ${DISPLAY}
    #         CAM_NUMBER: "08"
    #         TEST_ENABLE: "false"
    #         ROS_MASTER_MODE: ${ROS_MASTER_MODE}
    #     volumes:
    #         - /tmp/.X11-unix:/tmp/.X11-unix
    #         - /etc/localtime:/etc/localtime:ro
    #         - ${HOME}/.Xauthority:/root/.Xauthority
    #         - ${PWD}/common_files/alias.sh:/alias.sh
    #         - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
    #         - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
    #         - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
    #         - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
    #     image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
    #     command: /startup_for_docker.sh

    # detectron2_env_cam09:
    #     stdin_open: "true"
    #     network_mode: host
    #     runtime: nvidia
    #     environment:
    #         NVIDIA_VISIBLE_DEVICES: 1
    #         NVIDIA_DRIVER_CAPABILITIES: all
    #         DISPLAY: ${DISPLAY}
    #         CAM_NUMBER: "09"
    #         TEST_ENABLE: "false"
    #         ROS_MASTER_MODE: ${ROS_MASTER_MODE}
    #     volumes:
    #         - /tmp/.X11-unix:/tmp/.X11-unix
    #         - /etc/localtime:/etc/localtime:ro
    #         - ${HOME}/.Xauthority:/root/.Xauthority
    #         - ${PWD}/common_files/alias.sh:/alias.sh
    #         - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
    #         - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
    #         - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
    #         - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
    #     image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
    #     command: /startup_for_docker.sh

    detectron2_env_cam10:
        stdin_open: "true"
        network_mode: host
        runtime: nvidia
        environment:
            NVIDIA_VISIBLE_DEVICES: 2
            NVIDIA_DRIVER_CAPABILITIES: all
            DISPLAY: ${DISPLAY}
            CAM_NUMBER: "10"
            TEST_ENABLE: "false"
            ROS_MASTER_MODE: ${ROS_MASTER_MODE}
        volumes:
            - /tmp/.X11-unix:/tmp/.X11-unix
            - /etc/localtime:/etc/localtime:ro
            - ${HOME}/.Xauthority:/root/.Xauthority
            - ${PWD}/common_files/alias.sh:/alias.sh
            - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
            - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
            - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
            - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
        image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
        command: /startup_for_docker.sh

    detectron2_env_cam11:
        stdin_open: "true"
        network_mode: host
        runtime: nvidia
        environment:
            NVIDIA_VISIBLE_DEVICES: 2
            NVIDIA_DRIVER_CAPABILITIES: all
            DISPLAY: ${DISPLAY}
            CAM_NUMBER: "11"
            TEST_ENABLE: "false"
            ROS_MASTER_MODE: ${ROS_MASTER_MODE}
        volumes:
            - /tmp/.X11-unix:/tmp/.X11-unix
            - /etc/localtime:/etc/localtime:ro
            - ${HOME}/.Xauthority:/root/.Xauthority
            - ${PWD}/common_files/alias.sh:/alias.sh
            - ${PWD}/common_files/ros_setting.sh:/ros_setting.sh
            - ${PWD}/../../ros_packages/ytlab_environment/detectron2_ros_msgs:/catkin_ws/src/detectron2_ros_msgs
            - ${PWD}/include/detectron2_ros:/catkin_ws/src/detectron2_ros
            - ${PWD}/include/startup_for_docker-compose.sh:/startup_for_docker.sh
        image: ${IMAGE_NAME}.nvidia:${ROS}-cuda${CUDA}
        command: /startup_for_docker.sh
