<launch>
  <!-- valid option:
        mask_rcnn_X_101_32x8d_FPN_3x
        mask_rcnn_R_101_FPN_3x
        mask_rcnn_R_101_DC5_3x
        mask_rcnn_R_101_C4_3x
        mask_rcnn_R_50_FPN_3x -->

  <!-- ============================================================================= -->
  <!-- |               name               | inference time [s/im] | boxAP | maskAP | -->
  <!-- ============================================================================= -->
  <!-- | mask_rcnn_X_101_32x8d_FPN_3x     | 0.103                 | 44.3  | 39.5   | -->
  <!-- ============================================================================= -->
  <!-- | mask_rcnn_R_101_FPN_3x           | 0.056                 | 42.9  | 38.6   | -->
  <!-- ============================================================================= -->
  <!-- | mask_rcnn_R_101_DC5_3x           | 0.092                 | 41.9  | 37.3   | -->
  <!-- ============================================================================= -->
  <!-- | mask_rcnn_R_101_C4_3x            | 0.145                 | 42.6  | 36.7   | -->
  <!-- ============================================================================= -->
  <!-- | mask_rcnn_R_50_FPN_3x            | 0.043                 | 41.0  | 37.2   | -->
  <!-- ============================================================================= -->

  <!-- model settings -->
  <arg name="base_model_name"                 default="mask_rcnn_R_101_FPN_3x" />
  <arg name="custom_model_name"               default="mask_rcnn_R_101_FPN_3x_iter_9000_learn_5e-05" />
  <arg name="model_cfg"                       default="$(find detectron2_ros)/detectron2/configs/COCO-InstanceSegmentation/$(arg base_model_name).yaml" />
  <arg name="base_weight"                     default="$(find detectron2_ros)/detectron2/weights/COCO-InstanceSegmentation/$(arg base_model_name).pkl" />
  <arg name="custom_weight"                   default="$(find detectron2_ros)/detectron2/weights/COCO-InstanceSegmentation/$(arg custom_model_name).pth" />

  <!-- other parameters -->
  <arg name="detection_threshold"             default="0.6" />
  <arg name="gen_image_from_pcd"              default="false" />
  <arg name="use_compressed_image"            default="false" />
  <arg name="visualization"                   default="true" />
  <arg name="enable_quater_pcd"               default="false" />
  <arg name="use_custom_model"                default="false" />

  <node pkg="detectron2_ros" type="detectron2_ros.py" name="detectron2_ros_normal" output="screen"><!--  output="screen" -->
    <param name="detection_threshold"         value="$(arg detection_threshold)" />
    <param name="model_cfg"                   value="$(arg model_cfg)" />
    <param name="base_weight"                 value="$(arg base_weight)" />
    <param name="custom_weight"               value="$(arg custom_weight)" />
    <param name="visualization"               value="$(arg visualization)" />
    <param name="gen_image_from_pcd"          value="$(arg gen_image_from_pcd)" />
    <param name="use_compressed_image"        value="$(arg use_compressed_image)" />
    <param name="enable_quater_pcd"           value="$(arg enable_quater_pcd)" />
    <param name="use_custom_model"            value="$(arg use_custom_model)" />
    <remap from="/input_image"                to="/generated_img" />
    <remap from="/output_result"              to="/generated_img/maskrcnn/result" />
    <remap from="/output_visualization"       to="/generated_img/maskrcnn/visualization" />
  </node>
</launch>